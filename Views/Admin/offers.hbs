<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="canonical" href="https://getbootstrap.com/docs/5.3/examples/navbars/">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@docsearch/css@3">
    <link href="../assets/dist/css/bootstrap.min.css" rel="stylesheet">
    <!-- DataTables CSS -->
    {{!--
    <link href="https://cdn.datatables.net/1.11.5/css/dataTables.bootstrap5.min.css" rel="stylesheet"> --}}

    <link rel="stylesheet" href="/Style/admin/offers.css">

    <title>Offer Management</title>

    <link rel="icon" type="image/png" href="/Images/Logo/favicon_without_bg.png">
</head>

<body>

        <!-- Logout Confirmation Modal -->
    <div class="modal fade" id="logoutModal" tabindex="-1" aria-labelledby="logoutModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="logoutModalLabel">Confirm Logout</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    Are you sure you want to log out?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <a href="/admin/logout" class="btn btn-danger">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <input type="text" name="message" id="message" value="{{{message}}}" hidden>
    <!-- Modal HTML -->
    <div class="modal fade" id="messageModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    {{{message}}}
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <nav class="navbar navbar-expand-lg bg-body-dark d-flex justify-content-between">
        <div class="container-fluid">
            <a class="navbar-brand" href="#">
                <img id="logo-img" src="/Images/Logo/secondary_logo_black_without_bg.webp" alt="CHRONIX Secondary Logo">
            </a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarScroll"
                aria-controls="navbarScroll" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarScroll">
                <form class="d-flex ms-auto me-3 " role="search">
                    <input id="searchOffer" class="form-control me-2" type="search" placeholder="Search Offers"
                        aria-label="Search">
                    <button class="btn btn-outline-dark wishlist" type="submit" hidden><i
                            class="bi bi-search"></i></button>
                </form>

                <div class="dropdown">
                    <button class="btn btn-outline-info me-5 dropdown-toggle" type="button" data-bs-toggle="dropdown"
                        aria-expanded="false">
                        Add Offers
                    </button>
                    <ul class="dropdown-menu">
                        <li id="addOffer_product" class="dropdown-item">Add Product Offer</li>
                        <li id="addOffer_category" class="dropdown-item">Add Category Offer</li>
                    </ul>
                </div>

                {{#if admin}}
                <a class="navbar_username justify-content-center text-decoration-none text-center me-5 fs-5"
                    href="/admin/logout" class="">{{{admin.username}}}
                </a>
                {{else}}
                <a class="navbar_username me-3 text-decoration-none justify-content-center" href="/admin/logout"
                    class=""><i class="bi bi-box-arrow-right"></i> LOG OUT</a>

                {{/if}}
            </div>
        </div>
    </nav>

    <div class="main d-flex gap-1">

        <div id="sidebar" class="sidebar">
            <ul class="list-unstyled">
                <li id="dashboard" class="sidebar-item"><a href="/admin/dashboard" class="text-decoration-none"><i
                            class="bi bi-graph-up-arrow"></i>
                        <span class="item-text"> Dashboard</span></a></li>
                <li id="users" class="sidebar-item"><a href="/admin/users" class="text-decoration-none"><i
                            class="bi bi-people"></i>
                        <span class="item-text"> Users</span></a></li>
                <li id="orders" class="sidebar-item"><a href="/admin/orders" class="text-decoration-none"><i
                            class="bi bi-cart-check"></i>
                        <span class="item-text"> Orders</span></a></li>
                <li id="products" class="sidebar-item"><a href="/admin/products" class="text-decoration-none"><i
                            class="bi bi-watch"></i>
                        <span class="item-text"> Products</span></a></li>
                <li id="categories" class="sidebar-item"><a href="/admin/categories" class="text-decoration-none"><i
                            class="bi bi-inboxes"></i>
                        <span class="item-text"> Categories</span></a></li>
                <li id="offers" class="sidebar-item"><a href="/admin/offers" class="text-decoration-none"><i
                            class="bi bi-tags"></i>
                        <span class="item-text"> Offers</span></a></li>
                 
                <li id="coupons" class="sidebar-item"><a href="/admin/coupons" class="text-decoration-none"><i
                            class="bi bi-ticket-perforated"></i>
                        <span class="item-text"> Coupons</span></a></li>
                <li id="logout" class="sidebar-item">
                    <a href="#" class="d-flex align-items-center text-decoration-none" data-bs-toggle="modal"
                        data-bs-target="#logoutModal">
                        <i class="bi bi-box-arrow-right"></i>
                        <span class="item-text ms-2">Logout</span>
                    </a>
                </li>
            </ul>
        </div>

        <div class="container-fluid">

            <!-- Tabs Section -->
            <div class="tab-content">
                <!-- Tab-style buttons -->
                <div class="custom-tabs">
                    <div class="tab-buttons-container">
                        <button class="tab-button active" onclick="showContent('offeredCategories')">
                            <i class="bi bi-inboxes me-1"></i>Offered Categories
                        </button>
                        <button class="tab-button" onclick="showContent('offeredProducts')">
                            <i class="bi bi-watch me-1"></i>Offered Products
                        </button>
                    </div>
                </div>

                <!-- Content sections -->
                <div class="tab-content-container">

                    <div id="offeredCategories-content" class="content-section">
                        <div class="card">
                            <div class="col-12">

                                <!-- Filtering and Download Section -->
                                <div class="card-body">

                                    <!-- Offers Table -->
                                    <div class="table-responsive">
                                        <table class="table table-striped table-hover" id="offersTable">
                                            <thead>
                                                <tr>
                                                    <th>Category</th>
                                                    <th>Discount %</th>
                                                    <th>Status</th>
                                                    <th>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody class="align-middle">
                                                {{#each categoryOffers}}
                                                <tr data-id="{{this._id}}">
                                                    <td>{{typeId.category_name}}</td>
                                                    {{!-- <td><input type="hidden" name="id" value="{{this._id}}"></td>
                                                    --}}
                                                    <td contenteditable="true" data-field="discount"
                                                        data-id="{{this._id}}">{{discount}}</td>
                                                    <td>
                                                        <form action="/admin/offers/{{this._id}}/toggle-status"
                                                            method="POST">
                                                            <div class="form-check form-switch">
                                                                <input class="form-check-input" type="checkbox"
                                                                    role="switch" id="statusSwitch{{this._id}}" {{#if
                                                                    this.isActive}}checked{{/if}} name="status"
                                                                    onchange="this.form.submit()">
                                                            </div>
                                                        </form>
                                                    </td>
                                                    <td>
                                                        <button class="btn btn-sm btn-outline-success"
                                                            onclick="saveCategoryOffer(this)">
                                                            <i class="bi bi-save"></i>
                                                        </button>
                                                        <button class="btn btn-sm btn-outline-danger"
                                                            data-bs-toggle="modal"
                                                            data-bs-target="#deleteCategoryConfirmationModal"
                                                            onclick="setDeleteCategoryId('{{this._id}}')">
                                                            <i class="bi bi-trash"></i>
                                                        </button>

                                                        <!-- Modal for confirmation -->
                                                        <div class="modal fade" id="deleteCategoryConfirmationModal"
                                                            tabindex="-1"
                                                            aria-labelledby="deleteCategoryConfirmationModalLabel"
                                                            aria-hidden="true">
                                                            <div class="modal-dialog">
                                                                <div class="modal-content">
                                                                    <div class="modal-header">
                                                                        <h5 class="modal-title"
                                                                            id="deleteCategoryConfirmationModalLabel">
                                                                            Confirm Deletion</h5>
                                                                        <button type="button" class="btn-close"
                                                                            data-bs-dismiss="modal"
                                                                            aria-label="Close"></button>
                                                                    </div>
                                                                    <div class="modal-body">
                                                                        Are you sure you want to delete this category
                                                                        offer?
                                                                    </div>
                                                                    <div class="modal-footer">
                                                                        <button type="button" class="btn btn-secondary"
                                                                            data-bs-dismiss="modal">Cancel</button>
                                                                        <button type="button" class="btn btn-danger"
                                                                            onclick="deleteCategoryOffer()">Delete</button>
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>


                                                    </td>
                                                </tr>
                                                {{/each}}
                                            </tbody>
                                        </table>

                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div id="offeredProducts-content" class="content-section" style="display: none;">
                        <div class="card">
                            <div class="card-body">
                                <!-- Offers Table -->
                                <div class="table-responsive">
                                    <table class="table table-striped table-hover" id="offersTable">
                                        <thead>
                                            <tr>
                                                <th>Image</th>
                                                <th>Product</th>
                                                <th>Price</th>
                                                <th>Discount %</th>
                                                <th>Status</th>
                                                <th>Actions</th>
                                            </tr>
                                        </thead>
                                        <tbody class="align-middle">
                                            {{#each productOffers}}
                                            <tr data-id="{{this._id}}">
                                                <td>
                                                    <img src="/{{getFirstImage typeId.product_image}}"
                                                        alt="{{typeId.product_name}}" class="table-image">
                                                </td>
                                                <td>{{typeId.product_name}}</td>
                                                <td>Rs. {{typeId.currentPrice}}</td>
                                                <td data-field="discount" contenteditable="true">{{discount}}</td>
                                                <td>
                                                    <form action="/admin/offers/{{this._id}}/toggle-status"
                                                        method="POST">
                                                        <div class="form-check form-switch">
                                                            <input class="form-check-input" type="checkbox"
                                                                role="switch" id="statusSwitch{{this._id}}" {{#if
                                                                this.isActive}}checked{{/if}} name="status"
                                                                onchange="this.form.submit()">
                                                        </div>
                                                    </form>
                                                </td>
                                                <td class="d-flex gap-1">
                                                    <button class="btn btn-sm btn-outline-success"
                                                        onclick="saveProductOffer(this)">
                                                        <i class="bi bi-save"></i>
                                                    </button>
                                                    <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal"
                                                        data-bs-target="#deleteConfirmationModal"
                                                        onclick="setDeleteProductId('{{this._id}}')">
                                                        <i class="bi bi-trash"></i>
                                                    </button>

                                                    <!-- Modal for confirmation -->
                                                    <div class="modal fade" id="deleteConfirmationModal" tabindex="-1"
                                                        aria-labelledby="deleteConfirmationModalLabel"
                                                        aria-hidden="true">
                                                        <div class="modal-dialog">
                                                            <div class="modal-content">
                                                                <div class="modal-header">
                                                                    <h5 class="modal-title"
                                                                        id="deleteConfirmationModalLabel">Confirm
                                                                        Deletion</h5>
                                                                    <button type="button" class="btn-close"
                                                                        data-bs-dismiss="modal"
                                                                        aria-label="Close"></button>
                                                                </div>
                                                                <div class="modal-body">
                                                                    Are you sure you want to delete this product offer?
                                                                </div>
                                                                <div class="modal-footer">
                                                                    <button type="button" class="btn btn-secondary"
                                                                        data-bs-dismiss="modal">Cancel</button>
                                                                    <button type="button" class="btn btn-danger"
                                                                        onclick="deleteProductOffer()">Delete</button>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </td>
                                            </tr>
                                            {{/each}}
                                        </tbody>
                                    </table>

                                </div>
                            </div>
                        </div>
                    </div>

                </div>

            </div>

        </div>

    </div>




    <div class="modal fade" id="productOfferModal" tabindex="-1" aria-labelledby="productOfferModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productOfferModalLabel">Add Product Offer</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="productOfferForm" novalidate>
                        <div class="row g-3">
                            <!-- Searchable Product Dropdown -->
                            <div class="col-md-6">
                                <label for="productSearch" class="form-label">Search for a Product</label>
                                <input type="text" id="productSearch" class="form-control" placeholder="Search product"
                                    autocomplete="off" />
                                <div id="productDropdown" class="dropdown-menu custom-dropdown">
                                    <!-- Dynamic options will be added here -->
                                </div>
                            </div>

                            <!-- Offer Details -->
                            <div class="col-md-6">
                                <label for="discountValue" class="form-label">Discount Value</label>
                                <input type="number" class="form-control" id="discountValue" min="0" max="100"
                                    step="0.01" required placeholder="Enter discount amount">
                            </div>

                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-info" id="saveProductOfferBtn">Save Offer</button>
                </div>
            </div>
        </div>
    </div>




    <div class="modal fade" id="categoryOfferModal" tabindex="-1" aria-labelledby="categoryOfferModalLabel"
        aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="categoryOfferModalLabel">Add Category Offer</h5>
                    <button type="button" class="btn-close" hidden aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="categoryOfferForm">
                        <div class="row g-3">
                            <!-- Searchable Category Dropdown -->
                            <div class="col-md-6 position-relative">
                                <label for="categorySearch" class="form-label">Search Category</label>
                                <input type="text" id="categorySearch" class="form-control"
                                    placeholder="Search for a category">
                                <ul id="categoryDropdown" class="list-group position-absolute w-100"></ul>
                            </div>

                            <div class="col-md-6">
                                <label for="categoryDiscountValue" class="form-label">Discount Value</label>
                                <input type="number" class="form-control" id="categoryDiscountValue" min="0" max="100"
                                    step="0.01" required placeholder="Enter discount amount">
                            </div>

                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" hidden >Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveCategoryOfferBtn">Save Offer</button>
                </div>
            </div>
        </div>
    </div>









































    <!-- DataTables JS -->
    <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.min.js"></script>
    <script src="https://cdn.datatables.net/1.11.5/js/dataTables.bootstrap5.min.js"></script>



    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz"
        crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
        integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r"
        crossorigin="anonymous"></script>

    <!-- Select2 JS for searchable dropdown -->
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>



    <script>

        // Save updated product offer
        async function saveProductOffer(button) {
            const row = button.closest('tr'); // Get the row containing the Save button
            const offerId = row.getAttribute('data-id'); // Extract the offer ID from the row
            const discountCell = row.querySelector('[data-field="discount"]'); // Find the editable discount cell
            const newDiscount = discountCell.textContent.trim(); // Get the updated discount value

            // Validation
            if (!newDiscount || isNaN(newDiscount) || newDiscount < 0 || newDiscount > 100) {
                showModal("Please enter a valid discount percentage.");
                return;
            }

            // Make a PUT request to update the product offer
            try {
                const response = await fetch(`/admin/offers/updateProductOffer/${offerId}`, {
                    method: 'POST', // Change to PUT if you're following REST conventions
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        discount: parseInt(newDiscount),
                    }),
                });

                const data = await response.json();
                if (data.success) {
                    showModal('Product offer updated successfully!');
                } else {
                    showModal('Failed to update product offer.');
                }
            } catch (error) {
                console.error('Error:', error);
                showModal('An error occurred while updating the product offer.');
            }
        }


        // Save updated category offer
        async function saveCategoryOffer(button) {
            const row = button.closest('tr'); // Get the row containing the Save button
            const offerId = row.getAttribute('data-id'); // Extract the offer ID from the row
            const discountCell = row.querySelector('[data-field="discount"]'); // Find the editable discount cell
            const newDiscount = discountCell.textContent.trim(); // Get the updated discount value

            if (!newDiscount || isNaN(newDiscount) || newDiscount < 0 || newDiscount > 100) {
                showModal("Please enter a valid discount percentage.");
                return;
            }


            // Make a PUT request to update the category offer
            try {
                const response = await fetch(`/admin/offers/updateCategoryOffer/${offerId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        discount: parseInt(newDiscount),
                    }),
                });
                const data = await response.json();

                if (data.success) {
                    showModal('Category offer updated successfully!');
                } else {
                    showModal('Failed to update category offer.');
                }
            } catch (error) {
                console.error('Error:', error);
                showModal('An error occurred while updating the category offer.');
            }
        }


        // Function to show the modal with a dynamic message
        function showModal(message) {
            console.log('Modal with message: ' + message);
            const messageInput = document.getElementById('message');
            const modalBody = document.querySelector('#messageModal .modal-body');

            // Set the message value and modal body content
            messageInput.value = message;
            modalBody.textContent = message;

            // Show the modal
            const modal = new bootstrap.Modal(document.getElementById('messageModal'));
            modal.show();
        }


        let deleteCategoryId = null;

        // Set the ID of the category offer to be deleted
        function setDeleteCategoryId(id) {
            deleteCategoryId = id;
        }

        // Function to delete the category offer
        function deleteCategoryOffer() {
            if (deleteCategoryId) {
                fetch(`/admin/offers/deleteCategoryOffer/${deleteCategoryId}`, {
                    method: 'DELETE',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showModal('Category offer deleted successfully!');
                            location.reload()
                            // setTimeout(() => location.reload(), 3000); // Reload the page after 3 seconds to see the updated list
                        } else {
                            showModal('Error deleting category offer');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showModal('An error occurred');
                    });
            } else {
                showModal('No category offer selected for deletion');
            }
        }






        let deleteProductId = null;

        // Set the ID of the product offer to be deleted
        function setDeleteProductId(id) {
            deleteProductId = id;
        }

        // Function to delete the product offer
        function deleteProductOffer() {
            if (deleteProductId) {
                fetch(`/admin/offers/deleteProductOffer/${deleteProductId}`, {
                    method: 'DELETE',
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showModal('Product offer deleted successfully!');
                            location.reload()
                        } else {
                            showModal('Error deleting product offer');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showModal('An error occurred');
                    });
            } else {
                showModal('No product offer selected for deletion');
            }
        }

        // Trigger modal for Category Offer from dropdown
        document.getElementById("addOffer_category").addEventListener("click", () => {
            const categoryOfferModal = new bootstrap.Modal(document.getElementById("categoryOfferModal"));
            categoryOfferModal.show();
        });


        // -------------------------------------------------------------------------------------------------------------------------------For category--------------------


        //        const categorySearch = document.getElementById("categorySearch");
        //        const categoryDropdown = document.getElementById("categoryDropdown");
        //        const categories = [
        //            { id: "cat1", name: "Electronics" },
        //            { id: "cat2", name: "Fashion" },
        //            { id: "cat3", name: "Home Appliances" },
        //            { id: "cat4", name: "Sports" },
        //            { id: "cat5", name: "Books" },
        //        ];
        //
        //        // Populate dropdown with categories
        //        function populateCategoryDropdown(categoriesList) {
        //            categoryDropdown.innerHTML = "";
        //            categoriesList.forEach(category => {
        //                const li = document.createElement("li");
        //                li.textContent = category.name;
        //                li.className = "list-group-item list-group-item-action";
        //                li.style.cursor = "pointer";
        //                li.addEventListener("click", () => {
        //                    categorySearch.value = category.name;
        //                    categoryDropdown.style.display = "none";
        //                });
        //                categoryDropdown.appendChild(li);
        //            });
        //        }
        //
        //        // Show dropdown when the search bar is clicked
        //        categorySearch.addEventListener("focus", () => {
        //            populateCategoryDropdown(categories);
        //            categoryDropdown.style.display = "block";
        //        });
        //
        //        // Filter categories dynamically as user types
        //        categorySearch.addEventListener("input", () => {
        //            const searchValue = categorySearch.value.toLowerCase();
        //            const filteredCategories = categories.filter(category =>
        //                category.name.toLowerCase().includes(searchValue)
        //            );
        //            populateCategoryDropdown(filteredCategories);
        //            categoryDropdown.style.display = filteredCategories.length ? "block" : "none";
        //        });
        //
        //        // Close dropdown when clicking outside
        //        document.addEventListener("click", (event) => {
        //            if (!categorySearch.contains(event.target) && !categoryDropdown.contains(event.target)) {
        //                categoryDropdown.style.display = "none";
        //            }
        //        });
        //
        //        // Save category offer
        //        document.getElementById("saveCategoryOfferBtn").addEventListener("click", () => {
        //            const selectedCategory = categorySearch.value;
        //            const discountValue = document.getElementById("categoryDiscountValue").value;
        //
        //            if (!selectedCategory || !discountValue) {
        //                showModal("Please fill out all fields!");
        //                return;
        //            }
        //
        //            const offerData = {
        //                category: selectedCategory,
        //                discountValue,
        //            };
        //
        //            console.log("Category Offer Data:", offerData);
        //            showModal("Category Offer Added Successfully!");
        //            document.getElementById("categoryOfferForm").reset();
        //            categoryDropdown.style.display = "none";
        //        });


        const categoryOfferModal = new bootstrap.Modal(document.getElementById("categoryOfferModal"));

        document.getElementById("addOffer_category").addEventListener("click", async () => {
            try {
                // Fetch categories without an offer
                const response = await fetch('/admin/offers/categories-without-offers');
                const categories = await response.json();

                if (!response.ok) throw new Error(categories.error || 'Failed to fetch categories.');

                populateCategoryDropdown(categories);
                categoryOfferModal.show();
            } catch (error) {
                console.error(error);
                showModal('Failed to load categories. Please try again.');
            }
        });

        // Populate category dropdown
        function populateCategoryDropdown(categoriesList) {
            const categoryDropdown = document.getElementById("categoryDropdown");
            const categorySearch = document.getElementById("categorySearch");

            categoryDropdown.innerHTML = ""; // Clear existing dropdown items

            if (categoriesList.length === 0) {
                const noCategories = document.createElement("li");
                noCategories.textContent = "No categories available";
                noCategories.className = "list-group-item text-muted";
                categoryDropdown.appendChild(noCategories);
                return;
            }

            categoriesList.forEach(category => {
                const li = document.createElement("li");
                li.textContent = category.category_name;
                li.className = "list-group-item list-group-item-action";
                li.style.cursor = "pointer";
                li.addEventListener("click", () => {
                    categorySearch.value = category.category_name; // Set selected category
                    categorySearch.dataset.categoryId = category._id; // Store category ID
                    categoryDropdown.style.display = "none"; // Hide dropdown
                });
                categoryDropdown.appendChild(li);
            });
        }

        // Show dropdown when the search bar is clicked
        document.getElementById("categorySearch").addEventListener("focus", async () => {
            try {
                const response = await fetch('/admin/offers/categories-without-offers');
                const categories = await response.json();

                if (!response.ok) throw new Error(categories.error || 'Failed to fetch categories.');
                populateCategoryDropdown(categories);
                document.getElementById("categoryDropdown").style.display = "block";
            } catch (error) {
                console.error(error);
                showModal('Failed to load categories. Please try again.');
            }
        });

        // Filter categories as user types
        document.getElementById("categorySearch").addEventListener("input", async () => {
            const searchValue = document.getElementById("categorySearch").value.toLowerCase();
            try {
                const response = await fetch('/admin/offers/categories-without-offers');
                const categories = await response.json();

                if (!response.ok) throw new Error(categories.error || 'Failed to fetch categories.');

                const filteredCategories = categories.filter(category =>
                    category.category_name.toLowerCase().includes(searchValue)
                );
                populateCategoryDropdown(filteredCategories);
                document.getElementById("categoryDropdown").style.display = filteredCategories.length ? "block" : "none";
            } catch (error) {
                console.error(error);
                showModal('Failed to load categories. Please try again.');
            }
        });

        // Close dropdown when clicking outside
        document.addEventListener("click", (event) => {
            const categorySearch = document.getElementById("categorySearch");
            const categoryDropdown = document.getElementById("categoryDropdown");
            if (!categorySearch.contains(event.target) && !categoryDropdown.contains(event.target)) {
                categoryDropdown.style.display = "none";
            }
        });

        // Save category offer
        document.getElementById("saveCategoryOfferBtn").addEventListener("click", async () => {
            const categorySearch = document.getElementById("categorySearch");
            const categoryId = categorySearch.dataset.categoryId; // Get selected category ID
            const discountValue = document.getElementById("categoryDiscountValue").value;

            if (!categoryId || !discountValue || discountValue < 0 || discountValue > 100 ) {
                showModal("Please fill out all fields with valid values!");
                return;
            }

            try {
                const response = await fetch('/admin/offers/add-category-offer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ categoryId, discountValue }),
                });

                const result = await response.json();
                if (!response.ok) throw new showModal(result.error);
                categoryOfferModal.hide()
                showModal("Category Offer Added Successfully!");

                categoryOfferModal.hide();
                document.getElementById("categoryOfferForm").reset();
                document.getElementById("categoryDropdown").style.display = "none";
            } catch (error) {
                console.error(error);
                categoryOfferModal.hide();
                showModal('Failed to save the category offer. Please try again.');
            }
        });


        //-------------------------------------------------------------------------------------------------------------------------------For Products----------------

        // Cache elements
        const productSearch = document.getElementById("productSearch");
        const productDropdown = document.getElementById("productDropdown");
        const saveButton = document.getElementById("saveProductOfferBtn");
        const productOfferModal = new bootstrap.Modal(document.getElementById("productOfferModal"));

        // Fetch products from backend
        async function fetchProductsWithoutOffers() {
            try {
                const response = await fetch('/admin/offers/products-without-offers');
                if (!response.ok) throw new Error("Failed to fetch products");
                const products = await response.json();
                return products;
            } catch (error) {
                console.error(error);
                showModal("Failed to fetch products. Please try again.");
                return [];
            }
        }

        // Populate dropdown dynamically
        function populateDropdown(products) {
            productDropdown.innerHTML = ""; // Clear old options

            if (products.length === 0) {
                const noProducts = document.createElement("a");
                noProducts.textContent = "No products available";
                noProducts.className = "dropdown-item text-muted";
                productDropdown.appendChild(noProducts);
                return;
            }


            products.forEach(product => {
                const option = document.createElement("a");
                option.classList.add("dropdown-item");
                option.href = "#";
                option.dataset.value = product._id;
                option.textContent = product.product_name;
                productDropdown.appendChild(option);

                // Handle option click
                option.addEventListener("click", () => {
                    productSearch.value = product.product_name; // Set selected value in input
                    productDropdown.style.display = "none"; // Hide dropdown
                });
            });
        }

        // Show dropdown when the search bar is clicked
        productSearch.addEventListener("focus", async () => {
            const products = await fetchProductsWithoutOffers();
            populateDropdown(products); // Populate the dropdown with all products
            productDropdown.style.display = "block"; // Show the dropdown
        });

        // Update search functionality
        productSearch.addEventListener("input", async () => {
            const searchValue = productSearch.value.toLowerCase();
            const products = await fetchProductsWithoutOffers();
            const filteredProducts = products.filter(product =>
                product.product_name.toLowerCase().includes(searchValue)
            );
            populateDropdown(filteredProducts);
            productDropdown.style.display = filteredProducts.length ? "block" : "none";
        });

        // Close dropdown when clicking outside
        document.addEventListener("click", (event) => {
            if (!productSearch.contains(event.target) && !productDropdown.contains(event.target)) {
                productDropdown.style.display = "none";
            }
        });

        // Show modal when clicking Add Product Offer
        document.getElementById("addOffer_product").addEventListener("click", async () => {
            const products = await fetchProductsWithoutOffers();
            populateDropdown(products); // Ensure dropdown is populated
            productOfferModal.show();
        });

        // Save offer
        saveButton.addEventListener("click", async () => {
            const selectedProduct = [...productDropdown.children].find(option =>
                option.textContent === productSearch.value
            );
            const discountValue = document.getElementById("discountValue").value;

            if (!selectedProduct || !discountValue || discountValue < 0 || discountValue > 100) {
                showModal("Please fill all fields correctly with valid values.");
                return;
            }

            const offerData = {
                type: 'products',
                typeId: selectedProduct.dataset.value,
                discount: discountValue,
            };

            try {
                const response = await fetch('/admin/offers/add-product-offer', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(offerData),
                });
                console.log(offerData, 'is the offerData in the saveButton click function');
                if (!response.ok) throw new Error("Failed to save offer");
                productOfferModal.hide();
                showModal("Product Offer Added Successfully!");
            } catch (error) {
                console.error(error);
                showModal("Failed to save offer. Please try again.");
            }
        });


        // Search functionality
        document.getElementById('searchOffer').addEventListener('keyup', function () {
            const searchText = this.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');

            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchText) ? '' : 'none';
            });
        });

        document.getElementById('searchOffer').addEventListener('focusout', function () {
            if (this.value === '') {
                window.location.href = '/admin/offers';
            }
        });



        const toggleButton = document.getElementById('logo-img');
        const sidebar = document.getElementById('sidebar');

        toggleButton.addEventListener('click', function () {
            sidebar.classList.toggle('minimized');
        });

        // Minimize sidebar by default for small screens on page load
        if (window.innerWidth <= 768) {
            sidebar.classList.add('minimized');
        }

        // Adjust when window is resized (optional, but good for UX)
        window.addEventListener('resize', function () {
            if (window.innerWidth <= 768) {
                sidebar.classList.add('minimized');
            } else {
                sidebar.classList.remove('minimized');
            }
        });

        const togglePassword = document.querySelectorAll('.toggle-password');
        togglePassword.forEach(el => {
            el.addEventListener('click', function () {
                const input = this.parentElement.querySelector('input');
                if (input.type == 'password') {
                    input.type = 'text';
                    this.classList.remove('bi-eye-slash');
                    this.classList.add('bi-eye');
                } else {
                    input.type = 'password';
                    this.classList.remove('bi-eye');
                    this.classList.add('bi-eye-slash');
                }
            });
        });

        // Initialize the carousel with auto-scrolling
        const carousel = new bootstrap.Carousel(document.querySelector('#productCarousel'), {
            interval: 3000,
            wrap: true,
            touch: true,
            keyboard: true,
            pause: 'hover',
            ride: 'carousel',
            indicators: true
        });


        function showContent(contentType) {
            // Hide all content sections
            const contentSections = document.querySelectorAll('.content-section');
            contentSections.forEach(section => {
                section.style.display = 'none';
            });

            // Show the selected content
            document.getElementById(contentType + '-content').style.display = 'block';

            // Update button styles
            const buttons = document.querySelectorAll('.tab-button');
            buttons.forEach(button => {
                button.classList.remove('active');
                if (button.getAttribute('onclick').includes(contentType)) {
                    button.classList.add('active');
                }
            });
        }

        // Function to toggle coupon status AJAX request
        function toggleCouponStatus(couponId, currentStatus) {
            const newStatus = !currentStatus;
            fetch(`/admin/offers/${couponId}/toggle-status`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ isActive: newStatus })
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById(`statusSwitch${couponId}`).checked = newStatus;
                    } else {
                        showModal('Unable to toggle status');
                    }
                })
                .catch(error => console.error('Error:', error));
        }


        document.addEventListener('DOMContentLoaded', function () {
            const message = "{{{message}}}"; // Get message from server
            if (message) {
                var myModal = new bootstrap.Modal(document.getElementById('messageModal'));
                myModal.show();
            }
        });

    </script>
</body>

</html>